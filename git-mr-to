#!/usr/bin/env bash

fatal()
{
    printf 1>&2 'fatal: %s\n' "$@"
}

die()
{
    fatal "$@"
    exit 1
}

usage()
{
    printf 'usage: git mr-to [remote [destination [source]]]\n'
}

# A provider receives three or more arguments:
#
# 1: the complete destination project URL
# 2: the unqualified name of the source branch to merge
# 3: the unqualified name of the destination branch to merge into
# 4: optionally, the project namespace of the fork submitting the change
#
# It produces on standard output the complete URL with which to create a new
# merge request.
provider_bitbucket()
{
    printf '%s/pull-requests/new?source=%s&dest=%s' "$1" "$2" "$3"
}

provider_github()
{
    printf '%s/compare/%s...%s:%s?expand=1' "$1" "$3" "$4" "$2"
}

provider_gitlab()
{
    printf \
        '%s/merge_requests/new?merge_request%%5Bsource_branch%%5D=%s&merge_request%%5Btarget_branch%%5D=%s' \
        "$1" "$2" "$3"
}

https_url_of_remote()
{
    local remote_url

    remote_url="$(git remote get-url "$1")" || return

    if [[ $remote_url = git@* ]]
    then
        # Replace SCP-syntax colon with slash
        remote_url="${remote_url/://}"

        # Replace optional leading git@ with https://
        remote_url="${remote_url/#git@/https:\/\/}"
    fi

    # Strip optional trailing .git
    printf '%s' "${remote_url/%\.git/}"
}

infer_namespace_of_fork()
{
    local remote namespace

    # If there is only one configured remote, use that. It is unlikely but
    # possible that this remote is not named "origin".
    remote="$(git remote)"

    # But if there is more than one remote, assume one of them is named "origin"
    # and that that is the downstream fork submitting the change. If either of
    # those assumptions are wrong there is nothing we can do to meaningfully
    # guess the correct downstream fork.
    [[ "$remote" == *$'\n'* ]] && remote=origin

    namespace="$(git remote get-url "$remote" 2>/dev/null)" || return

    # All providers happen to have project namespaces of the form
    # (basename (dirname project)), independently of protocol.
    namespace="${namespace%/*}"
    namespace="${namespace##*[/:]}"

    printf '%s' "$namespace"
}

main()
{
    local remote dest src remote_url namespace

    remote="${1:-$(git remote)}"
    dest="${2:-master}"
    src="${3:-$(git rev-parse --abbrev-ref HEAD)}"

    if [[ -z $remote ]]
    then
        fatal "no remote configured or supplied"
        usage 1>&2
        exit 1
    fi

    if [[ "$remote" == *$'\n'* ]]
    then
        die "ambiguous remote: '${remote/$'\n'/ }'"
    fi

    remote_url="$(https_url_of_remote "$remote")" || exit

    case "$remote_url" in
        *gitlab*)
            provider=provider_gitlab
            ;;
        *github*)
            provider=provider_github
            ;;
        *bitbucket*)
            provider=provider_bitbucket
            ;;
    esac

    if [[ -z $provider ]]
    then
        die "no provider for '$remote_url'"
    fi

    namespace="$(infer_namespace_of_fork)" || printf 1>&2 '%s\n' \
        "warn: ambiguous remote with no 'origin', could not infer downstream fork namespace"

    xdg-open "$($provider "$remote_url" "$src" "$dest" "$namespace")"
}

main "$@"
